# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cpPEbgKq1evdsjBerfTu4Fi0JsN_CI3E

Extra Practice Questions – CO₂ Emissions Dataset
 Basic Exploration
# Load the dataset into a DataFrame and display the first 10 rows
"""

import pandas as pd

# Load the dataset
file_path ='/content/co2_emission (1).csv'
df = pd.read_csv(file_path)

# for displaying the first 10 rows
print(df.head(10))

"""# Display the column names, data types, and shape of the dataset.

"""

import pandas as pd

# Load the dataset
file_path = "/content/co2_emission (1).csv"
df = pd.read_csv(file_path)

# Display column names
print( df.columns.tolist())

# Display data types
print( df.dtypes)

# Display shape of dataset
print( df.shape)

"""# Check if there are any missing values in each column."""

import pandas as pd

# Load the dataset
file_path = "/content/co2_emission (1).csv"
df = pd.read_csv(file_path)

# Check for missing values in each column
print(df.isnull().sum())

"""# Get the summary statistics (describe()) of the numerical columns."""

import pandas as pd

# Load the dataset
file_path = "/content/co2_emission (1).csv"
df = pd.read_csv(file_path)
print(df.describe())

"""Filtering & Querying
# Filter the dataset to show only rows where CO2 emissions are greater than 200.
"""

import pandas as pd

# Load the dataset
file_path = "/content/co2_emission (1).csv"
df = pd.read_csv(file_path)

# Filter rows where CO2 emissions > 200
filtered_df = df[df["Annual CO₂ emissions (tonnes )"] > 200]

print(filtered_df.head())

"""# Show rows where the Fuel Type is "Diesel"
"""

import pandas as pd

# Load the dataset
file_path = "/content/co2_emission (1).csv"
df = pd.read_csv(file_path)

# Filter rows where Fuel Type is 'Diesel'
diesel_rows = df[df["Fuel Type"] == "Diesel"]

# Display first 10 rows
print(diesel_rows.head(10))

"""# Filter for vehicles from the year 2020 that have CO2 emissions less than 150."""

filtered_vehicles = df[(df["Year"] == 2020) & (df["CO2 Emissions"] < 150)]


print(filtered_vehicles.head(10))

"""Sorting & Aggregation
# Sort the dataset by CO2 Emissions in descending order.
"""

sorted_df = df.sort_values(by="Annual CO₂ emissions (tonnes )", ascending=False)
print(sorted_df.head())

"""# Group the dataset by Make and find the average CO2 Emissions for each"""

avg = df.groupby('Entity')['Annual CO₂ emissions (tonnes )'].mean()
print(avg.head())

"""# Find the make with the highest average Fuel Consumption City.

"""

highestavg = avg.idxmax()
highest = avg.max()
print(f" {highestavg} ({highest:.2f} tonnes)")

"""Advanced Queries
# What are the top 5  categories with the highest average CO2 Emissions?
"""

top5 = df.groupby('Entity')['Annual CO₂ emissions (tonnes )'].mean().nlargest(5)
print(top5)

"""# Find  the lowest CO2 emissions"""

lowest = df.loc[df['Annual CO₂ emissions (tonnes )'].idxmin()]
print(lowest[['Entity', 'Year', 'Annual CO₂ emissions (tonnes )']])

"""# List all unique fuel types used in the dataset."""

unique = df['Entity'].unique()
print(unique)

"""# Which year has the highest average CO2 emissions?"""

year = df.groupby('Year')['Annual CO₂ emissions (tonnes )'].mean().idxmax()
highest = df.groupby('Year')['Annual CO₂ emissions (tonnes )'].mean().max()
print(f" {year} ({highest:.2f} tonnes)")

"""# Identify the Make that appears most frequently in the dataset."""

most = df['Entity'].mode()[0]
print(f" {most}")